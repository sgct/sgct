##########################################################################################
# SGCT                                                                                   #
# Simple Graphics Cluster Toolkit                                                        #
#                                                                                        #
# Copyright (c) 2012-2025                                                                #
# For conditions of distribution and use, see copyright notice in LICENSE.md             #
##########################################################################################

if (SGCT_BUILD_TESTS)
  if (SGCT_DEP_INCLUDE_CATCH2)
    add_subdirectory(catch2)
    # Catch2 by default compiles with C++14, which leads to some linker errors:
    # https://github.com/catchorg/Catch2/issues/2046
    # Switching to cxx_std_23 triggers a bug in Clang17
    # https://github.com/llvm/llvm-project/issues/61415
    target_compile_features(Catch2 PUBLIC cxx_std_20)
    target_compile_features(Catch2WithMain PUBLIC cxx_std_20)
    set_property(TARGET Catch2 PROPERTY FOLDER "External")
    set_property(TARGET Catch2WithMain PROPERTY FOLDER "External")
    sgct_register_package(Catch2 Catch2::Catch2)
  elseif (TARGET Catch2::Catch2)
    sgct_register_package(Catch2 Catch2::Catch2)
  else ()
    find_package(Catch2 REQUIRED)
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_GLAD)
  add_subdirectory(glad)
  set_property(TARGET glad PROPERTY FOLDER "External")
  sgct_register_package(glad glad::glad)
elseif (TARGET glad)
  sgct_register_package(glad glad::glad)
else ()
  find_package(glad REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_SCN)
  # scnlib only supports static build
  set(BUILD_SHARED_LIBS_OLD ${BUILD_SHARED_LIBS})
  set(BUILD_SHARED_LIBS OFF)
  add_subdirectory(scnlib)
  set_target_properties(scn PROPERTIES FOLDER "External")
  sgct_register_package(scn scn::scn)
  set(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_OLD})
elseif (TARGET scn)
  sgct_register_package(scn scn::scn)
else ()
  find_package(scn REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_ZLIB)
  add_subdirectory(zlib)
  set_property(TARGET zlib1 PROPERTY FOLDER "External")
  if (WIN32)
    if (TARGET zlibstatic)
      set_property(TARGET zlibstatic PROPERTY FOLDER "External")
    endif ()
  endif ()
  set_property(TARGET minizip PROPERTY FOLDER "External")

  if (MSVC)
    target_compile_options(zlib1 PRIVATE "/W0")
    target_compile_definitions(zlib1 PRIVATE "_SCL_SECURE_NO_WARNINGS")
    target_compile_options(minizip PRIVATE "/W0")
    target_compile_definitions(minizip PRIVATE "_SCL_SECURE_NO_WARNINGS")
  else ()
    target_compile_options(zlib1 PRIVATE "-w")
    target_compile_options(minizip PRIVATE "-w")
  endif ()

  sgct_register_package(minizip minizip::minizip)
  sgct_register_package(ZLIB ZLIB::ZLIB)
else ()
  if (TARGET ZLIB)
    sgct_register_package(ZLIB ZLIB::ZLIB)
  else ()
     find_package(ZLIB REQUIRED)
  endif ()
  if (TARGET minizip)
    sgct_register_package(minizip minizip::minizip)
  else ()
    find_package(minizip REQUIRED)
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_GLFW)
  set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "Build the GLFW example programs")
  set(GLFW_BUILD_TESTS OFF CACHE BOOL "Build the GLFW test programs")
  set(GLFW_BUILD_DOCS OFF CACHE BOOL "Build the GLFW documentation")
  set(GLFW_INSTALL OFF CACHE BOOL "Generate installation target")
  set(GLFW_BUILD_WAYLAND OFF CACHE BOOL "Build support for Wayland")
  add_subdirectory(glfw)
  set_property(TARGET glfw PROPERTY FOLDER "External")
  set_property(TARGET update_mappings PROPERTY FOLDER "External")
  sgct_register_package(glfw3 glfw)
elseif (TARGET glfw3)
  sgct_register_package(glfw3 glfw3)
else ()
  find_package(glfw3 REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_LIBPNG)
  add_subdirectory(lpng)
  set_property(TARGET png PROPERTY FOLDER "External")
  add_library(PNG::PNG ALIAS png)
  sgct_register_package(PNG PNG::PNG)
elseif (TARGET PNG)
  sgct_register_package(PNG PNG::PNG)
else ()
  find_package(PNG REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_GLM)
  add_library(glm INTERFACE)
  add_library(glm::glm ALIAS glm)
  target_include_directories(glm SYSTEM INTERFACE "glm")
  sgct_register_package(glm glm::glm)
elseif (TARGET glm)
  sgct_register_package(glm glm::glm)
else()
  find_package(glm REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_STB)
  add_library(sgct_stb INTERFACE IMPORTED GLOBAL)
  add_library(sgct::stb ALIAS sgct_stb)
  target_include_directories(sgct_stb SYSTEM INTERFACE "stb")
  sgct_register_package(Stb sgct::stb)
else ()
  find_package(Stb QUIET)
  if (Stb_FOUND)
    add_library(sgct_stb INTERFACE IMPORTED GLOBAL)
    add_library(sgct::stb ALIAS sgct_stb)
    target_include_directories(sgct_stb INTERFACE $<BUILD_INTERFACE:${Stb_INCLUDE_DIR}>)
  else ()
    message(FATAL_ERROR "stb dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_TINYXML)
  set(BUILD_TESTING OFF)
  set(tinyxml2_INSTALL_PKGCONFIG OFF CACHE BOOL "" FORCE)
  add_subdirectory(tinyxml)
  set_target_properties(tinyxml2 PROPERTIES FOLDER "External")
  sgct_register_package(tinyxml2 tinyxml2::tinyxml2)
elseif (TARGET tinyxml2)
  sgct_register_package(tinyxml2 tinyxml2::tinyxml2)
else ()
  find_package(tinyxml2 REQUIRED)
endif ()

if (SGCT_FREETYPE_SUPPORT)
  if (SGCT_DEP_INCLUDE_FREETYPE)
    set(SKIP_INSTALL_ALL ON)
    add_subdirectory(freetype2) # needs zconf.h generated by lpng->zlib
    target_include_directories(freetype PUBLIC SYSTEM freetype2/include)
    if (MSVC)
      target_compile_definitions(freetype PRIVATE "_SCL_SECURE_NO_WARNINGS")
    endif ()
    set_target_properties(freetype PROPERTIES FOLDER "External")
    sgct_register_package(Freetype freetype)
  elseif (TARGET freetype)
    sgct_register_package(Freetype freetype)
  else ()
    find_package(freetype REQUIRED)
  endif ()
endif()

if (SGCT_DEP_INCLUDE_VRPN AND SGCT_VRPN_SUPPORT)
  add_subdirectory(vrpn)
  set_target_properties(vrpn PROPERTIES FOLDER "External")
  sgct_register_package(vrpn vrpn)
endif ()

if (SGCT_DEP_INCLUDE_OPENVR AND SGCT_OPENVR_SUPPORT)
  add_library(openvr INTERFACE)
  sgct_register_package(openvr openvr)
endif ()

if (WIN32 AND SGCT_SPOUT_SUPPORT)
  add_library(spout SHARED IMPORTED GLOBAL)
  target_include_directories(spout INTERFACE spout)
  set_property(TARGET spout PROPERTY IMPORTED_IMPLIB ${PROJECT_SOURCE_DIR}/ext/spout/SpoutLibrary.lib)
  set_property(TARGET spout PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/ext/spout/SpoutLibrary.dll)
endif ()

if (TRACY_ENABLE)
  set(SGCT_TRACY_SUPPORT ON CACHE BOOL "" FORCE)
endif ()

if (SGCT_TRACY_SUPPORT)
  if (SGCT_DEP_INCLUDE_TRACY)
    option(TRACY_ENABLE "Enable profiling" ON)
    option(TRACY_NO_FRAME_IMAGE "Disable the frame image support and its thread" ON)
    add_subdirectory(tracy)
    set_property(TARGET TracyClient PROPERTY FOLDER "External")
    sgct_register_package(Tracy Tracy::TracyClient)
  elseif (TARGET Tracy::TracyClient)
    sgct_register_package(Tracy Tracy::TracyClient)
  else ()
    find_package(Tracy REQUIRED)
  endif ()

  if (WIN32)
    if (TRACY_ENABLE)
      message(WARNING "Tracy does not support compiling with Edit&Continue, so we have to disable that feature")
      set(SGCT_ENABLE_EDIT_CONTINUE OFF CACHE BOOL "" FORCE)
    endif ()
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_JSON)
  add_subdirectory(json)
  sgct_register_package(nlohmann_json nlohmann_json::nlohmann_json)
elseif (TARGET nlohmann_json)
  sgct_register_package(nlohmann_json nlohmann_json::nlohmann_json)
else ()
  find_package(nlohmann_json REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_JSON_VALIDATOR)
  set(JSON_VALIDATOR_INSTALL FALSE CACHE BOOL "" FORCE)
  add_subdirectory(json-schema-validator SYSTEM)
  add_library(nlohmann_json_schema_validator::nlohmann_json_schema_validator ALIAS nlohmann_json_schema_validator)
  sgct_register_package(nlohmann_json_schema_validator nlohmann_json_schema_validator::nlohmann_json_schema_validator)
  set_property(TARGET nlohmann_json_schema_validator PROPERTY FOLDER "External")

  if (MSVC)
    target_compile_options(nlohmann_json_schema_validator PRIVATE "/W0")
    target_compile_definitions(nlohmann_json_schema_validator PRIVATE "_SCL_SECURE_NO_WARNINGS")
  else ()
    target_compile_options(nlohmann_json_schema_validator PRIVATE "-w")
  endif ()

#elseif (TARGET nlohmann_json_schema_validator)
  #sgct_register_package(nlohmann_json_schema_validator nlohmann_json_schema_validator::nlohmann_json_schema_validator)
else ()
  find_package(nlohmann_json_schema_validator REQUIRED)
endif ()

if (SGCT_DEP_INCLUDE_SCALABLE AND WIN32)
  add_subdirectory(scalable SYSTEM)
endif ()

if (WIN32 AND SGCT_NDI_SUPPORT)
  add_subdirectory(ndi SYSTEM)
endif (WIN32 AND SGCT_NDI_SUPPORT)
